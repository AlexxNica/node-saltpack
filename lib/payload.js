// Generated by IcedCoffeeScript 108.0.11
(function() {
  var compute_authenticator, createHash, createHmac, crypto, msgpack, nonce, prng, step1, util;

  prng = require('crypto').prng;

  createHash = require('crypto').createHash;

  createHmac = require('crypto').createHmac;

  msgpack = require('purepack');

  crypto = require('keybase-nacl');

  nonce = require('./nonce.iced');

  util = require('./util.iced');

  compute_authenticator = function(hash, key) {
    var hmac;
    hmac = createHmac('sha512', key);
    hmac.update(hash);
    return hmac.digest().slice(0, 32);
  };

  step1 = function(header_hash, block_num, payload_secretbox) {
    var crypto_hash, step1_cat, step1_hash;
    step1_cat = Buffer.concat([header_hash, nonce.nonceForChunkSecretBox(block_num), payload_secretbox]);
    crypto_hash = createHash('sha512');
    crypto_hash.update(step1_cat);
    step1_hash = crypto_hash.digest();
    return step1_hash;
  };

  exports.generate_encryption_payload_packet = function(payload_encryptor, plaintext, block_num, header_hash, mac_keys) {
    var authenticator, authenticators, mac_key, payload_secretbox, step1_hash, _i, _len;
    payload_secretbox = payload_encryptor.secretbox({
      plaintext: plaintext,
      nonce: nonce.nonceForChunkSecretBox(block_num)
    });
    step1_hash = step1(header_hash, block_num, payload_secretbox);
    console.log("" + (header_hash.toString('hex')) + ", " + block_num);
    authenticators = [];
    for (_i = 0, _len = mac_keys.length; _i < _len; _i++) {
      mac_key = mac_keys[_i];
      authenticator = compute_authenticator(step1_hash, mac_key);
      authenticators.push(authenticator);
    }
    return [authenticators, payload_secretbox];
  };

  exports.parse_encryption_payload_packet = function(payload_decryptor, payload_list, block_num, header_hash, mac_key, recipient_index) {
    var computed_authenticator, payload, step1_hash;
    step1_hash = step1(header_hash, block_num, payload_list[1]);
    computed_authenticator = compute_authenticator(step1_hash, mac_key);
    if (!util.bufeq_secure(computed_authenticator, payload_list[0][recipient_index])) {
      throw new Error('Integrity check failed!');
    }
    payload = payload_decryptor.secretbox_open({
      ciphertext: payload_list[1],
      nonce: nonce.nonceForChunkSecretBox(block_num)
    });
    return payload;
  };

}).call(this);
