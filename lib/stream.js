// Generated by IcedCoffeeScript 108.0.11
(function() {
  var DecryptStream, EncryptStream, NaClDecryptStream, NaClEncryptStream, armor, format, header, msgpack, nacl, nonce, noop, payload, saltpack_block_len, stream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('keybase-chunk-stream');

  nacl = require('keybase-nacl');

  armor = require('node-armor-x');

  msgpack = require('msgpack-lite');

  payload = require('./payload.iced');

  header = require('./header.iced');

  nonce = require('./nonce.iced');

  format = require('./format.iced');

  saltpack_block_len = Math.pow(1024, 2);

  noop = function() {};

  NaClEncryptStream = (function(_super) {
    __extends(NaClEncryptStream, _super);

    NaClEncryptStream.prototype._encrypt = function(chunk) {
      var payload_list;
      payload_list = payload.generate_encryption_payload_packet(this._encryptor, chunk, this._block_num, this._header_hash, this._mac_keys);
      ++this._block_num;
      return payload_list;
    };

    NaClEncryptStream.prototype._transform = function(chunk, encoding, cb) {
      var header_hash, header_intermediate, mac_keys, payload_key, _ref;
      if (!this._header_written) {
        _ref = header.generate_encryption_header_packet(this._encryptor, this._recipients), header_intermediate = _ref.header_intermediate, header_hash = _ref.header_hash, mac_keys = _ref.mac_keys, payload_key = _ref.payload_key;
        this._header_hash = header_hash;
        this._mac_keys = mac_keys;
        this._encryptor.secretKey = payload_key;
        this.push(header_intermediate);
        this._header_written = true;
      }
      return NaClEncryptStream.__super__._transform.call(this, chunk, encoding, cb);
    };

    NaClEncryptStream.prototype._flush = function(cb) {
      NaClEncryptStream.__super__._flush.call(this, noop);
      this.push(this._encrypt(new Buffer([])));
      return cb();
    };

    function NaClEncryptStream(_encryptor, _recipients) {
      this._encryptor = _encryptor;
      this._recipients = _recipients;
      this._encrypt = __bind(this._encrypt, this);
      this._header_written = false;
      this._block_num = 0;
      this._mac_keys = null;
      this._header_hash = null;
      NaClEncryptStream.__super__.constructor.call(this, this._encrypt, {
        block_size: saltpack_block_len,
        exact_chunking: true,
        writableObjectMode: false,
        readableObjectMode: true
      });
    }

    return NaClEncryptStream;

  })(stream.ChunkStream);

  NaClDecryptStream = (function(_super) {
    __extends(NaClDecryptStream, _super);

    NaClDecryptStream.prototype._decrypt = function(chunk) {
      var payload_text;
      payload_text = payload.parse_encryption_payload_packet(this._decryptor, chunk, this._block_num, this._header_hash, this._mac_key, this._recipient_index);
      ++this._block_num;
      return payload_text;
    };

    NaClDecryptStream.prototype._transform = function(chunk, encoding, cb) {
      var header_hash, mac_key, payload_key, recipient_index, _, _ref;
      if (this._header_read) {
        return NaClDecryptStream.__super__._transform.call(this, chunk, encoding, cb);
      } else {
        _ref = header.parse_encryption_header_packet(this._decryptor, chunk), _ = _ref._, header_hash = _ref.header_hash, payload_key = _ref.payload_key, _ = _ref._, mac_key = _ref.mac_key, recipient_index = _ref.recipient_index;
        this._header_hash = header_hash;
        this._decryptor.secretKey = payload_key;
        this._mac_key = mac_key;
        this._recipient_index = recipient_index;
        this._header_read = true;
        return cb();
      }
    };

    function NaClDecryptStream(_decryptor) {
      this._decryptor = _decryptor;
      this._decrypt = __bind(this._decrypt, this);
      this._header_read = false;
      this._header_hash = null;
      this._mac_key = null;
      this._recipient_index = -1;
      this._block_num = 0;
      NaClDecryptStream.__super__.constructor.call(this, this._decrypt, {
        block_size: saltpack_block_len,
        exact_chunking: true,
        writableObjectMode: true,
        readableObjectMode: false
      });
    }

    return NaClDecryptStream;

  })(stream.ChunkStream);

  exports.EncryptStream = EncryptStream = (function() {
    function EncryptStream(encryptor, recipients, do_armoring) {
      this.nacl_stream = new NaClEncryptStream(encryptor, recipients);
      this.pack_stream = msgpack.createEncodeStream();
      this.nacl_stream.pipe(this.pack_stream);
      this.last_stream = this.pack_stream;
      if (do_armoring) {
        this.armor_stream = new armor.stream.StreamEncoder(armor.encoding.b62.encoding);
        this.format_stream = new format.FormatStream();
        this.pack_stream.pipe(this.armor_stream).pipe(this.format_stream);
        this.last_stream = this.format_stream;
      }
    }

    EncryptStream.prototype.write = function(plaintext, cb) {
      this.nacl_stream.write(plaintext);
      return cb();
    };

    EncryptStream.prototype.end = function(cb) {
      this.last_stream.on('finish', cb);
      return this.nacl_stream.end();
    };

    EncryptStream.prototype.pipe = function(dest) {
      return this.last_stream.pipe(dest);
    };

    return EncryptStream;

  })();

  exports.DecryptStream = DecryptStream = (function() {
    function DecryptStream(decryptor, do_armoring) {
      this.unpack_stream = msgpack.createDecodeStream();
      this.nacl_stream = new NaClDecryptStream(decryptor);
      this.unpack_stream.pipe(this.nacl_stream);
      this.first_stream = this.unpack_stream;
      if (do_armoring) {
        this.dearmor_stream = new armor.stream.StreamDecoder(armor.encoding.b62.encoding);
        this.dearmor_stream.pipe(this.unpack_stream);
        this.first_stream = this.dearmor_stream;
      }
    }

    DecryptStream.prototype.write = function(plaintext, cb) {
      this.first_stream.write(plaintext);
      return cb();
    };

    DecryptStream.prototype.end = function(cb) {
      this.nacl_stream.on('finish', cb);
      return this.first_stream.end();
    };

    DecryptStream.prototype.pipe = function(dest) {
      return this.nacl_stream.pipe(dest);
    };

    return DecryptStream;

  })();

}).call(this);
